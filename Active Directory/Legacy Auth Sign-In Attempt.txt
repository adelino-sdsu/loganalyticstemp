let timeRange = ago(1d);
let endtime = 7d;
let legacyAuthentications = SigninLogs
| where TimeGenerated >= ago(endtime)
// success logons only
| where ResultType == 0
| extend ClientAppUsed = iff(isempty(ClientAppUsed)==true,"Unknown" ,ClientAppUsed)
| extend isLegacyAuth = case( ClientAppUsed contains "Browser", "No",  ClientAppUsed contains "Mobile Apps and Desktop clients", "No",  ClientAppUsed contains "Exchange ActiveSync", "No",  ClientAppUsed contains "Other clients", "Yes",  "Unknown")
| where isLegacyAuth=="Yes";
legacyAuthentications
| where TimeGenerated >= timeRange
// Don't alert for accounts already seen using legacy auth in prior 7 days
| join kind=leftanti
(
    legacyAuthentications
    | where TimeGenerated between((timeRange - endtime) .. timeRange)
)
on UserPrincipalName, ClientAppUsed
| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser
| extend LocationString= strcat(tostring(LocationDetails["countryOrRegion"]), "/",  tostring(LocationDetails["state"]), "/", tostring(LocationDetails["city"]))
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), AttemptCount = count()  by isLegacyAuth, UserPrincipalName, ClientAppUsed , tostring(OS) , tostring(Browser) , LocationString
| project StartTimeUtc, EndTimeUtc, UserPrincipalName, ClientAppUsed, AttemptCount, isLegacyAuth, OS, Browser, LocationString
| sort by AttemptCount desc nulls last
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName